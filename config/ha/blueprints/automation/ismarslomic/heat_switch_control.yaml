blueprint:
  name: Heat switch control
  description: Turn the switch for heat on/off based on the target temperature on daytime and night
  domain: automation
  input:
    climate_entity:
      name: Climate switch
      description: The climate switch to turn/off.
      selector:
        entity:
          domain: switch
    temp_sensor:
      name: Temperature Sensor
      description: Temperature Sensor to check.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    target_temp_daytime:
      name: Target temperature daytime
      description: If the heating turns on, it heats to this target temperature at daytime.
      selector:
        entity:
          domain: input_number
    target_temp_night:
      name: Target temperature night
      description: If the heating turns on, it heats to this target temperature at night.
      selector:
        entity:
          domain: input_number
    condition_price_level_daytime:
      name: Accepted price level daytime
      description: The accepted price level for turning heat on at daytime (1 = very cheap, 5 = very expensive).
      default: 3
      selector:
        number:
          min: 1
          max: 5
          mode: slider
    condition_price_level_night:
      name: Accepted price level night
      description: The accepted price level for turning heat on at night (1 = very cheap, 5 = very expensive).
      default: 3
      selector:
        number:
          min: 1
          max: 5
          mode: slider

mode: single

variables:
  condition_price_level_daytime: !input condition_price_level_daytime
  condition_price_level_night: !input condition_price_level_night
  electricity_price_level: '{{ states("sensor.template_electricity_price_level_smarthytte") | int(5) }}'
  is_price_level_equal_or_below_daytime: '{{ electricity_price_level <= condition_price_level_daytime | int }}'
  is_price_level_equal_or_below_night: '{{ electricity_price_level <= condition_price_level_night | int }}'

trigger:
  - platform: homeassistant
    event: start
  - platform: event
    event_type: automation_reloaded
  - platform: time_pattern
    minutes: /10

action:
  - choose:
      # IF daytime
      - conditions:
          - condition: time
            after: input_datetime.daytime_start
            before: input_datetime.daytime_end
          - condition: numeric_state
            entity_id: !input temp_sensor
            below: !input target_temp_daytime
          - condition: template
            value_template: "{{ is_price_level_equal_or_below_daytime }}"
        sequence:
          - service: switch.turn_on
            entity_id: !input climate_entity
      # ELIF night
      - conditions:
          - condition: time
            after: input_datetime.daytime_end
            before: input_datetime.daytime_start
          - condition: numeric_state
            entity_id: !input temp_sensor
            below: !input target_temp_night
          - condition: template
            value_template: "{{ is_price_level_equal_or_below_night }}"
        sequence:
          - service: switch.turn_on
            entity_id: !input climate_entity
    # DEFAULT - turn off
    default:
      - service: switch.turn_off
        entity_id: !input climate_entity