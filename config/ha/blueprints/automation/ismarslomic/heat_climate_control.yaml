blueprint:
  name: Heat climate control
  description: Turn the climate/thermostat for heat on/off based on presence, time of the day and the electricity price.
  domain: automation
  input:
    climate_entity:
      name: Climate thermostat
      description: The climate thermostat to turn/off.
      selector:
        entity:
          domain: climate
    target_temp_daytime:
      name: Target temperature daytime
      description: The target temperature at daytime when present.
      selector:
        entity:
          domain: input_number
    target_temp_night:
      name: Target temperature night
      description: The target temperature at night when present.
      selector:
        entity:
          domain: input_number
    target_temp_away:
      name: Target temperature away
      description: The target temperature when away.
      selector:
        entity:
          domain: input_number
    condition_price_level_daytime:
      name: Accepted price level daytime
      description: The accepted electricity price for heating at daytime (1 = very cheap, 5 = very expensive).
      default: 3
      selector:
        number:
          min: 1
          max: 5
          mode: slider
    condition_price_level_night:
      name: Accepted price level night
      description: The accepted electricity price for heating at night (1 = very cheap, 5 = very expensive).
      default: 3
      selector:
        number:
          min: 1
          max: 5
          mode: slider
    condition_price_level_away:
      name: Accepted price level away
      description: The accepted electricity price for heating when away (1 = very cheap, 5 = very expensive).
      default: 3
      selector:
        number:
          min: 1
          max: 5
          mode: slider

mode: single

variables:
  is_checked_in: '{{ is_state("input_boolean.checked_in", "on") }}'
  should_prepare_for_arrival: '{{ (states("sensor.booking_days_to_next_check_in")|int(-1)) == (states("input_number.prepare_routines_days_before_arrival")|int(0)) }}'
  is_present_mode: '{{ is_checked_in or should_prepare_for_arrival }}'
  target_temp_daytime: !input target_temp_daytime
  target_temp_night: !input target_temp_night
  target_temp_away: !input target_temp_away
  condition_price_level_daytime: !input condition_price_level_daytime
  condition_price_level_night: !input condition_price_level_night
  condition_price_level_away: !input condition_price_level_away
  electricity_price_level: '{{ states("sensor.template_electricity_price_level_smarthytte") | int(5) }}'
  is_price_level_equal_or_below_daytime: '{{ electricity_price_level <= condition_price_level_daytime | int }}'
  is_price_level_equal_or_below_night: '{{ electricity_price_level <= condition_price_level_night | int }}'
  is_price_level_equal_or_below_away: '{{ electricity_price_level <= condition_price_level_away | int }}'

trigger:
  - platform: homeassistant
    event: start
  - platform: event
    event_type: automation_reloaded
  - platform: time_pattern
    minutes: /10

action:
  - choose:
      # IF present (or arriving soon) - daytime
      - conditions:
          - condition: template
            value_template: "{{ is_present_mode == true }}"
          - condition: time
            after: input_datetime.daytime_start
            before: input_datetime.daytime_end
          - condition: template
            value_template: "{{ is_price_level_equal_or_below_daytime }}"
        sequence:
          - service: climate.turn_on # This sets also the HVAC Mode to HEAT
            entity_id: !input climate_entity
          - service: climate.set_temperature
            data_template:
              temperature: "{{ states(target_temp_daytime) | float }}"
            entity_id: !input climate_entity
      # ELIF resent (or arriving soon) - night
      - conditions:
          - condition: template
            value_template: "{{ is_present_mode == true }}"
          - condition: time
            after: input_datetime.daytime_end
            before: input_datetime.daytime_start
          - condition: template
            value_template: "{{ is_price_level_equal_or_below_night }}"
        sequence:
          - service: climate.turn_on # This sets also the HVAC Mode to HEAT
            entity_id: !input climate_entity
          - service: climate.set_temperature
            data_template:
              temperature: "{{ states(target_temp_night) | float }}"
            entity_id: !input climate_entity
      # ELIF away
      - conditions:
          - condition: template
            value_template: "{{ is_present_mode == false }}"
          - condition: template
            value_template: "{{ is_price_level_equal_or_below_away }}"
        sequence:
          - service: climate.turn_on # This sets also the HVAC Mode to HEAT
            entity_id: !input climate_entity
          - service: climate.set_temperature
            data_template:
              temperature: "{{ states(target_temp_away) | float }}"
            entity_id: !input climate_entity
    # DEFAULT - turn off, either present or away the price is not acceptable
    default:
      - service: switch.turn_off
        entity_id: !input climate_entity
