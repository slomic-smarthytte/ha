zwave_battery_check:
  alias: Notify if battery level below treshold
  sequence:
  - condition: template
    value_template: "{% set battery_level_treshold = states('input_number.battery_level_treshold')
      | int(0) %}\n{% set ignored_entities = [\"sensor.zweather_balkong_battery_level\",
      \"sensor.move_battery_level\"] %}\n{% set sensors = namespace(battery=[]) %}\n{%
      for s in states.sensor if s.entity_id not in ignored_entities and 'battery_level'
      in s.entity_id and (s.state | int(0)) < battery_level_treshold %}\n  {% set
      sensors.battery = sensors.battery + [ s ] %}\n{% endfor %}\n{{ sensors.battery
      | count > 0 }}"
  - data_template:
      message: "{% set battery_level_treshold = states('input_number.battery_level_treshold')
        | int(0) %} {% set ignored_entities = [\"sensor.zweather_balkong_battery_level\",
        \"sensor.move_battery_level\"] %} {% set sensors = namespace(battery=[]) %}
        \ {% for s in states.sensor if s.entity_id not in ignored_entities and 'battery_level'
        in s.entity_id and (s.state | int(0)) < battery_level_treshold %}\n  {% set
        sensors.battery = sensors.battery + [ s ] %}\n{% endfor %} <ol>  {% for entity
        in sensors.battery %} <li>{{ entity.name }} ({{ entity.state }}%)</li> {%
        endfor %}  </ol>"
      title: "{% set battery_level_treshold = states('input_number.battery_level_treshold')
        | int(0) %} {% set ignored_entities = [\"sensor.zweather_balkong_battery_level\",
        \"sensor.move_battery_level\"] %} {% set sensors = namespace(battery=[]) %}
        \ {% for s in states.sensor if s.entity_id not in ignored_entities and 'battery_level'
        in s.entity_id and (s.state | int(0)) < battery_level_treshold %}\n  {% set
        sensors.battery = sensors.battery + [ s ] %}\n{% endfor %} {{sensors.battery
        | count }} devices has battery level below {{battery_level_treshold}}%"
    service: persistent_notification.create
  - data_template:
      data:
        blocks: "{% set battery_level_treshold = states('input_number.battery_level_treshold')
          | int(0) %} {% set ignored_entities = [\"sensor.zweather_balkong_battery_level\",
          \"sensor.move_battery_level\"] %} {% set sensors = namespace(battery=[])
          %} {% for s in states.sensor if s.entity_id not in ignored_entities and
          'battery_level' in s.entity_id and (s.state | int(0)) < battery_level_treshold
          %}\n  {% set sensors.battery = sensors.battery + [ s ] %}\n{% endfor %}
          {%- set sensor_count = sensors.battery | count -%}  [\n  {\n    \"type\":
          \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\":
          \"`{{sensor_count}}` devices has battery level below `{{battery_level_treshold}}%`\"\n
          \   }\n  },\n  {% for sensor in sensors.battery %}\n  {\n    \"type\": \"divider\"\n
          \ },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\":
          \"mrkdwn\",\n      \"text\": \"*{{loop.index}}. {{sensor.name}}*\"\n    },\n
          \   \"fields\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\":
          \"*Battery level:*\\n{{sensor.state}}%\"\n      }\n    ]\n  },\n  {% endfor
          %}\n]"
      message: Battery level below treshold
      target: '#battery-level-alerts'
    service: notify.slomic_smarthytte
  mode: single
restart_internet_router:
  alias: Restart internet router
  sequence:
  - data:
      title: Turning internet router off
      message: Turning internet router off
    service: persistent_notification.create
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.fibaro_wall_plug_asus_router_stue_2_switch
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - data:
      title: Turning internet router on
      message: Turning internet router on
    service: persistent_notification.create
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.fibaro_wall_plug_asus_router_stue_2_switch
  mode: single
  icon: mdi:router-network
tts_and_resume:
  alias: TTS and Resume (sonos)
  icon: mdi:text-to-speech
  variables:
    mediaplayer_volume_level: '{{ state_attr(tts_entity,''volume_level'') }}'
  mode: single
  fields:
    tts_entity:
      name: Sonos speaker
      description: The entity of the Sonos speaker to announce message to
      required: true
      selector:
        media:
    language:
      name: TTS language
      description: The language to use for tts
      required: true
      selector:
        text:
          type: text
    message:
      name: TTS message
      description: The tts message to play on the speaker
      required: true
      selector:
        text:
          type: text
  sequence:
  - service: sonos.snapshot
    data:
      entity_id: '{{ tts_entity }}'
      with_group: true
  - service: media_player.volume_set
    data:
      entity_id: '{{ tts_entity }}'
      volume_level: 0.25
  - service: tts.google_translate_say
    data:
      entity_id: '{{ tts_entity }}'
      language: '{{ language }}'
      message: '{{ message }}'
  - delay: 1
  - alias: Wait until media player is paused
    wait_template: '{{ is_state(tts_entity, ''paused'') }}'
  - service: media_player.volume_set
    data:
      entity_id: '{{ tts_entity }}'
      volume_level: '{{ mediaplayer_volume_level }}'
  - service: sonos.restore
    data:
      entity_id: '{{ tts_entity }}'
      with_group: true
set_next_scene_for_hue_zone:
  alias: Set next scene for Hue zone
  description: Set next Hue Scene for selected zone
  fields:
    last_used_hue_zone_name_entity:
      name: Last used Hue zone
      description: Input helper to get and store last used Hue zone name
      example: input_text.last_hue_zone_name_stue_2
      required: true
      selector:
        entity:
          domain: input_text
    last_used_hue_scene_index_entity:
      name: Last used Hue scene index
      description: Input helper to get and store last used Hue scene index
      example: input_number.last_hue_scene_index_stue_2
      required: true
      selector:
        entity:
          domain: input_number
    target_hue_zone_name:
      name: Target Hue zone name
      description: The Hue zone name to set new scene for
      example: Stue 2 - minimum
      required: true
      selector:
        text:
          type: text
  variables:
    last_used_hue_scene_index: '{{states(last_used_hue_scene_index_entity)|int}}'
    last_used_hue_zone_name: '{{states(last_used_hue_zone_name_entity)}}'
    available_hue_scenes:
    - Snow sparkle
    - Blood moon
    - Arctic aurora
    - Nutcracker
    - Relax
    - Bright
    - Energize
  sequence:
  - if:
    - condition: template
      value_template: '{{last_used_hue_scene_index >= available_hue_scenes|length
        - 1 or target_hue_zone_name != last_used_hue_zone_name}}'
    then:
    - variables:
        new_hue_scene_index: 0
        new_hue_zone_name: '{{target_hue_zone_name}}'
        new_hue_scene_name: '{{available_hue_scenes[new_hue_scene_index]}}'
        new_hue_scene_entity: scene.{{new_hue_zone_name|slugify}}_{{new_hue_scene_name|slugify}}
    - service: input_text.set_value
      data:
        value: '{{new_hue_zone_name}}'
      target:
        entity_id: '{{last_used_hue_zone_name_entity}}'
    - service: input_number.set_value
      data:
        value: '{{new_hue_scene_index}}'
      target:
        entity_id: '{{last_used_hue_scene_index_entity}}'
    - service: hue.activate_scene
      target:
        entity_id: '{{new_hue_scene_entity}}'
    else:
    - variables:
        new_hue_scene_index: '{{last_used_hue_scene_index + 1}}'
        new_hue_zone_name: '{{last_used_hue_zone_name}}'
        new_hue_scene_name: '{{available_hue_scenes[new_hue_scene_index]}}'
        new_hue_scene_entity: scene.{{new_hue_zone_name|slugify}}_{{new_hue_scene_name|slugify}}
    - service: input_text.set_value
      data:
        value: '{{new_hue_zone_name}}'
      target:
        entity_id: '{{last_used_hue_zone_name_entity}}'
    - service: input_number.set_value
      data:
        value: '{{new_hue_scene_index}}'
      target:
        entity_id: '{{last_used_hue_scene_index_entity}}'
    - service: hue.activate_scene
      target:
        entity_id: '{{new_hue_scene_entity}}'
  mode: single
  icon: mdi:palette
change_brightness_for_last_used_hue_scene:
  alias: Change brightness for last used Hue scene
  sequence:
  - condition: template
    value_template: '{{current_hue_scene_brightness != new_hue_scene_brightness}}'
  - service: hue.activate_scene
    data:
      brightness: '{{new_hue_scene_brightness}}'
    target:
      entity_id: '{{last_used_hue_scene_entity}}'
  description: Set new brightness for last used Hue scene
  fields:
    last_used_hue_zone_name_entity:
      name: Last used Hue zone
      description: Input helper to get last used Hue zone name
      example: input_text.last_hue_zone_name_stue_2
      required: true
      selector:
        entity:
          domain: input_text
    last_used_hue_scene_index_entity:
      name: Last used Hue scene index
      description: Input helper to get last used Hue scene index
      example: input_number.last_hue_scene_index_stue_2
      required: true
      selector:
        entity:
          domain: input_number
    brightness_step_pct:
      name: Brightness step
      description: Change brightness of Hue scene by a percentage
      example: -5
      default: 0
      required: true
      selector:
        number:
          min: -100
          max: 100
          step: 5
          unit_of_measurement: '%'
          mode: slider
  variables:
    max_brightness: 255
    min_brightness: 1
    last_used_hue_scene_index: '{{states(last_used_hue_scene_index_entity)|int}}'
    last_used_hue_zone_name: '{{states(last_used_hue_zone_name_entity)}}'
    available_hue_scenes:
    - Snow sparkle
    - Blood moon
    - Arctic aurora
    - Nutcracker
    - Relax
    - Bright
    - Energize
    last_used_hue_scene_name: '{{available_hue_scenes[last_used_hue_scene_index]}}'
    last_used_hue_scene_entity: scene.{{last_used_hue_zone_name|slugify}}_{{last_used_hue_scene_name|slugify}}
    last_used_hue_scene_group_entity: light.{{last_used_hue_zone_name|slugify}}
    current_hue_scene_brightness: '{{state_attr(last_used_hue_scene_group_entity,''brightness'')|int}}'
    new_hue_scene_brightness: '{% set new_brightness = (current_hue_scene_brightness
      + (max_brightness *(brightness_step_pct/100)))|round %}

      {%- if new_brightness >= max_brightness %} {{max_brightness}} {%- elif new_brightness
      <= min_brightness %} {{min_brightness}} {%- else %} {{new_brightness}} {%- endif
      -%}'
  mode: single
  icon: mdi:palette
